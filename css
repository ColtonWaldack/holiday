import React, { useState, useRef } from 'react';

const RecipePage = () => {
  const [comments, setComments] = useState({});

  const addComment = (commentData) => {
    const timeStamp = new Date().getTime();
    setComments({ ...comments, [`comment-id${timeStamp}`]: commentData });
  };

  const editComment = (commentID, editedData) => {
    setComments({
      ...comments,
      [commentID]: {
        ...comments[commentID],
        commentBody: editedData,
      },
    });
  };

  const deleteComment = (commentID) => {
    const updatedComments = { ...comments };
    delete updatedComments[commentID];
    setComments(updatedComments);
  };

  const renderComment = (key) => {
    return (
      <li key={key}>
        <Comment
          index={key}
          details={comments[key]}
          editComment={editComment}
          deleteComment={deleteComment}
        />
      </li>
    );
  };

  return (
    <div>
      <ol className="comment-list">{Object.keys(comments).map(renderComment)}</ol>
      <AddCommentForm addComment={addComment} />
      <pre>{JSON.stringify(comments, null, 2)}</pre>
    </div>
  );
};

const AddCommentForm = ({ addComment }) => {
  const nameInput = useRef(null);
  const descInput = useRef(null);

  const processComment = (event) => {
    event.preventDefault();
    const commentData = {
      commentName: nameInput.current.value,
      commentBody: descInput.current.value,
    };

    addComment(commentData);
    event.target.reset();
  };

  return (
    <div className="callout secondary">
      <h4 className="leave-comment">Add a Comment</h4>
      <form className="post-edit" onSubmit={processComment}>
        <input type="text" ref={nameInput} placeholder="Your Name" required />
        <textarea ref={descInput} placeholder="Add your comment here" required />
        <button
          type="submit"
          className="button button-outline comment-button action-button expand-right"
        >
          Add Comment
        </button>
      </form>
    </div>
  );
};


import React, { useState, useRef } from 'react';

const Comment = ({ index, details, editComment, deleteComment }) => {
  const [editMode, setEditMode] = useState(false);
  const editTextInput = useRef(null);

  const renderCommentRead = () => {
    return (
      <div className="comment-text">
        <p>{details.commentBody}</p>
      </div>
    );
  };

  const editCommentHandler = (event) => {
    event.preventDefault();
    editComment(index, editTextInput.current.value);
    setEditMode(false);
  };

  const deleteCommentHandler = () => {
    deleteComment(index);
  };

  const renderCommentEdit = () => {
    return (
      <form className="post-edit" onSubmit={editCommentHandler}>
        <textarea ref={editTextInput} defaultValue={details.commentBody} required />
        <button
          type="submit"
          className="button button-outline comment-button action-button expand-right"
        >
          Save
        </button>
      </form>
    );
  };

  return (
    <div>
      {editMode ? renderCommentEdit() : renderCommentRead()}
      <button
        className="button button-outline comment-button action-button expand-right"
        onClick={() => setEditMode(!editMode)}
      >
        Edit
      </button>
      <button
        className="button alert comment-button action-button expand-right"
        onClick={deleteCommentHandler}
      >
        Delete
      </button>
    </div>
  );
};

export default RecipePage;
